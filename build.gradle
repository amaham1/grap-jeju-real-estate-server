plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'war'  // war 플러그인 추가
    id "com.github.node-gradle.node" version "3.0.1"
}

node {
    /**
     * 특정 Node.js 버전을 다운로드 및 설치 할 지 여부
     * true: 다운로드 및 설치
     * false: 전역으로 설치된 Node.js 사용함.
     */
    download = true

    /**
     * download가 true일 경우에만 사용
     * version에 명시한 버전으로 Node.js 다운로드 및 설치
     * workDir에 설치됨
     */
    version = "14.17.6"

    /**
     * 사용할 npm 버전을 지정하면 npmWorkDir에 설치됨
     * npm 버전을 지정하지 않으면 Node.js에 번들로 제공되는 npm 버전으로 사용됨
     */
    npmVersion = "6.14.15"

    /**
     * download가 true일 경우에만 사용
     * Node.js 배포를 가져오기 위한 기본 URL
     */
    distBaseUrl = "https://nodejs.org/dist"

    /**
     * npmInstall 작업에 의해 실행되는 npm 명령
     * 기본적으로 설치되지만 ci로 변경할 수 있음
     */
    npmInstallCommand = "install"

    /**
     * download가 true일 경우에만 사용
     * Node.js가 압축 해제된 디렉토리
     */
    workDir = file("${project.projectDir}/.gradle/nodejs")

    /**
     * npm이 설치된 디렉토리 (특정 버전이 정의된 경우)
     */
    npmWorkDir = file("${project.projectDir}/.gradle/npm")

    /**
     * vue 프로젝트 디렉토리 위치
     * package.json 파일과 node_modules 디렉토리가 있는 곳
     * "저는 프로젝트 Root 아래 vue 프로젝트를 생성하였으므로 아래와 같이 주소를 작성해주었습니다."
     */
    nodeProjectDir = file("${project.projectDir}/grap/grap")

    // Whether the plugin automatically should add the proxy configuration to npm and yarn commands
    // according the proxy configuration defined for Gradle
    // Disable this option if you want to configure the proxy for npm or yarn on your own
    // (in the .npmrc file for instance)
    nodeProxySettings = ProxySettings.SMART
}

group = 'org.alljeju'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'  // 내장 톰캣 제외
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    runtimeOnly 'mysql:mysql-connector-java:8.0.33'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.springframework:spring-context-support'
    implementation 'com.github.ben-manes.caffeine:caffeine'
}


apply plugin: 'com.github.node-gradle.node'
task deleteGrapBuildFiles(type: Delete) {
    delete "src/main/resources/static", "src/main/resources/static/index.html", "${project.projectDir}/grap/grap/node_modules"
}

task npmBuild(type: NpmTask, dependsOn: ['npmInstall']) {
    args = ["run", "build"]
}
processResources.dependsOn 'npmBuild'

tasks.named('test') {
    useJUnitPlatform()
}
